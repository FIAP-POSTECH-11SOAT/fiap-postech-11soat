apiVersion: v1
kind: ConfigMap
metadata:
  name: rms-config
data:
  NODE_ENV: "development"
  APP_PORT: "3000"
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
  DB_NAME: "rms"
  DB_SCHEMA: "public"

---
apiVersion: v1
kind: Secret
metadata:
  name: rms-secrets
type: Opaque
stringData:
  DATABASE_URL: "postgresql://postgres:postgres@postgres-service:5432/rms?schema=public"
  POSTGRES_PASSWORD: "postgres"
  POSTGRES_USER: "postgres"
  POSTGRES_DB: "rms"
  MERCADO_PAGO_ACCESS_TOKEN: "TEST-8678038003952623-052718-cec5173635e5de390d0586378d533fe9-106819378"

---
# PostgreSQL Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rms-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: rms-secrets
              key: POSTGRES_USER
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: rms-secrets
              key: POSTGRES_DB
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: postgres-storage
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rms-app-deployment
  labels:
    app: rms-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rms-app
  template:
    metadata:
      labels:
        app: rms-app
    spec:
      containers:
      - name: rms-app
        image: rms:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 3000
        
        # Environment variables
        envFrom:
        - configMapRef:
            name: rms-config
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: rms-secrets
              key: DATABASE_URL
        - name: MERCADO_PAGO_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              name: rms-secrets
              key: MERCADO_PAGO_ACCESS_TOKEN

        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Gi"
            cpu: "500m"
      
      # Init container para aguardar banco
      initContainers:
      - name: wait-for-db
        image: postgres:15-alpine
        command: ['sh', '-c', 'until pg_isready -h postgres-service -p 5432; do echo waiting for database; sleep 2; done;']

---
apiVersion: v1
kind: Service
metadata:
  name: rms-app-service
spec:
  selector:
    app: rms-app
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
  type: NodePort